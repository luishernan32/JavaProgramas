import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;

public class ConvertirHexadecimalAImagenPNG {
    public static void main(String[] args) {
        // Cadena hexadecimal que representa la imagen PNG
        String imagenHexadecimal
        
        // Ruta donde deseas guardar la imagen PNG
        String rutaImagenPNG = "src/imagenes/luis.png";
        
        try {
            // Convierte la cadena hexadecimal a un arreglo de bytes
            byte[] bytesImagen = hexadecimalToBytes(imagenHexadecimal);

            // Crea una imagen a partir de los bytes
            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytesImagen);
            BufferedImage imagen = ImageIO.read(byteArrayInputStream);

            // Guarda la imagen en formato PNG en un archivo
            ImageIO.write(imagen, "PNG", new File(rutaImagenPNG));

            System.out.println("Imagen PNG guardada correctamente en " + rutaImagenPNG);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static byte[] hexadecimalToBytes(String hexadecimal) {
        int len = hexadecimal.length();
        byte[] bytes = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            bytes[i / 2] = (byte) ((Character.digit(hexadecimal.charAt(i), 16) << 4)
                                 + Character.digit(hexadecimal.charAt(i + 1), 16));
        }
        return bytes;
    }
}





